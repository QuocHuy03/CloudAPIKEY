import os
import time  # <- b·ªï sung

from config import PROXIES_FILE
from utils.file_utils import load_proxies
from services.key_service_wrapper import update_usage_count_by
from utils.ausynclab import (
    create_clone_voice_tts,
    get_voice_list as ausync_get_voice_list,
    text_to_speech as ausync_text_to_speech,
    get_audio_list as ausync_get_audio_list,
    get_audio_detail as ausync_get_audio_detail,
)

def _get_proxies():
    return load_proxies(PROXIES_FILE)

def create_clone_voice(voice_name, language, gender, age, audio_file_path, key, device_id=None):
    result = create_clone_voice_tts(
        voice_name=voice_name,
        language=language,
        gender=gender,
        age=age,
        audio_file_path=audio_file_path,
        key=key,
        proxies=_get_proxies()
    )
    return result

def get_voice_list(key):
    result = ausync_get_voice_list(key, proxies=_get_proxies())
    return result["data"] if result.get("success") else []

def get_detail_audio(audio_id, key):
    result = ausync_get_audio_detail(audio_id, key, proxies=_get_proxies())
    return result["data"] if result.get("success") else None

def get_audio_list(key):
    result = ausync_get_audio_list(key, proxies=_get_proxies())
    return result["data"] if result.get("success") else []

def text_to_speech(audio_name, text, voice_id, callback_url, key, device_id=None, speed=1.0, model_name="myna-1", language=None):
    """
    G·ªçi API text-to-speech c·ªßa AusyncLab ƒë·ªÉ t·∫°o gi·ªçng n√≥i t·ª´ vƒÉn b·∫£n.
    - Gi·ªõi h·∫°n t·ªëi ƒëa 500 k√Ω t·ª±.
    - T√≠nh s·ªë l∆∞·ª£t s·ª≠ d·ª•ng ch√≠nh x√°c theo ƒë·ªô d√†i vƒÉn b·∫£n.
    - T·ª± ƒë·ªông ƒë·ª£i ƒë·∫øn khi job ho√†n t·∫•t n·∫øu tr·∫£ v·ªÅ IN_PROGRESS.
    - C√≥ try/catch bao to√†n b·ªô ƒë·ªÉ b√°o l·ªói r√µ r√†ng.
    """
    try:
        text_length = len(text)
        if text_length > 500:
            return {
                "success": False,
                "message": f"‚ùå VƒÉn b·∫£n qu√° d√†i ({text_length} k√Ω t·ª±). Gi·ªõi h·∫°n t·ªëi ƒëa l√† 500 k√Ω t·ª±."
            }

        count = text_length
        print(f"üìù Text length: {text_length} k√Ω t·ª± -> Tr·ª´ {count} l∆∞·ª£t")

        result = ausync_text_to_speech(
            audio_name=audio_name,
            text=text,
            voice_id=voice_id,
            callback_url=callback_url,
            key=key,
            speed=speed,
            model_name=model_name,
            language=language,
            proxies=_get_proxies()
        )

        if not result.get("success"):
            print(f"‚ö†Ô∏è API tr·∫£ v·ªÅ l·ªói: {result}")
            return {
                "success": False,
                "message": result.get("message") or result.get("error") or "L·ªói kh√¥ng x√°c ƒë·ªãnh t·ª´ API"
            }

        data = result.get("data")
        if not data:
            return {
                "success": False,
                "message": "‚ùå API kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu audio"
            }

        task_id = data.get("id")
        print(f"üé§ Job ID: {task_id}, voice: {data.get('voice_name')}, state: {data.get('state')}")

        while data.get("state") == "IN_PROGRESS":
            time.sleep(2)
            data = get_detail_audio(task_id, key)
            if not data:
                return {
                    "success": False,
                    "message": "‚ùå Kh√¥ng ki·ªÉm tra ƒë∆∞·ª£c tr·∫°ng th√°i task"
                }
            print(f"‚è≥ ƒêang x·ª≠ l√Ω... state = {data.get('state')}")

        if data.get("state") == "SUCCEED":
            
            update_usage_count_by(key, count=count, device_id=device_id, module="clone_voice")
            print(f"‚úÖ Ho√†n t·∫•t! audio_url = {data.get('audio_url')}")
            return {
                "success": True,
                "data": data
            }
        else:
            return {
                "success": False,
                "message": f"‚ùå Voice t·∫°o th·∫•t b·∫°i. Tr·∫°ng th√°i cu·ªëi c√πng: {data.get('state')}"
            }

    except Exception as e:
        print(f"‚ùå EXCEPTION: {str(e)}")
        return {
            "success": False,
            "message": f"L·ªói h·ªá th·ªëng: {str(e)}"
        }

def use_voice_key(key, device_id):
    try:
        update_usage_count_by(key, count=1, device_id=device_id, module="clone_voice")
        return True, "‚úÖ ƒê√£ tr·ª´ l∆∞·ª£t th√†nh c√¥ng"
    except Exception as e:
        return False, str(e)
